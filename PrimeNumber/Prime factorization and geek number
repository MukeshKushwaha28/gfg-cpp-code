As we know that every number >=2 can be represented as natural powers of primes(prime factorization). Also prime factorization is unique for a number. 

Eg. 360 = 233251

Today we are interested in geek numbers. A geek number is a number whose prime factorization only contains powers of unity.Below are some geek numbers.

Eg. 2 = 21
    22 = 21111

Example 1:

Input: N = 22
Output: Yes
Explaination: 22 = 21111. Where all the 
powers of prime numbers are one.
Example 2:

Input: N = 4
Output: No
Explaination: 4 = 22. Where all the 
powers of all the prime are not one.
Your Task:
You do not need to read input or print anything. Your task is to complete the function geekNumber() which takes N as input parameter and returns 1 if it a geek number. Otherwise, returns 0.

Expected Time Complexity: O(sqrt(N))
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ N ≤ 106  




**********************************************************************************************************
//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function Template for C++

class Solution{
public:
    int geekNumber(int N){
        // code here
        
         int i=2;

        while(i*i<=N)

        {

            int count=0;

            while(N%i==0)

            {

            N=N/i;

            count++;

            }

            if(count>1) 

            return 0;

            i++;

        }

        return 1;
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int N;
        cin>>N;
        
        Solution ob;
        if(ob.geekNumber(N))
            cout<<"Yes\n";
        else
            cout<<"No\n";
    }
    return 0;
}
// } Driver Code Ends
