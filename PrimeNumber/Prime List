You are given the head of a linked list. You have to replace all the values of the nodes with the nearest prime number. If more than one prime number exists at an equal distance, choose the smallest one.

Example 1:

Input:
2 → 6 → 10
Output:
2 → 5 → 11
Explanation:
The nearest prime of 2 is 2 itself.
The nearest primes of 6 are 5 and 7,
since 5 is smaller so, 5 will be chosen.
The nearest prime of 10 is 11.
 

Example 2:

Input:
1 → 15 → 20
Output:
2 → 13 → 19
Explanation:
The nearest prime of 1 is 2.
The nearest primes of 15 are 13 and 17,
since 13 is smaller so, 13 will be chosen.
The nearest prime of 20 is 19.





******************************************************************************************************************
//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

class Node{
public:
    int val;
    Node *next;
    Node(int num){
        val=num;
        next=NULL;
    }
};


// } Driver Code Ends
//User function Template for C++

/*

class Node{
public:
    int val;
    Node *next;
    Node(int num){
        val=num;
        next=NULL;
    }
};

*/

class Solution{
public:

  bool prime(int n)
  {
      if(n==1)
       return false;
       
       if(n==2 || n==3)
        return true;
        
        if(n%2==0 || n%3==0)
        return false;
        
        for(int i = 5;i*i<=n;i+=6)
        {
            if(n%i==0 || n%(i+2)==0)
             return false;
        }
        
        return true;
       
        
        
  }

    Node *primeList(Node *head){
        
        Node *temp  = head;
        
        while(temp !=NULL)
        {
            int c = 0;
            int r = temp->val;
            while(!prime(r))
            {
                r--;
                c++;
                
            }
            
            int n = 0;
            int p = temp->val;
             while(!prime(p))
            {
                p++;
                n++;
                
            }
            
            if(c>n)
            temp->val = p;
            else
            temp->val = r;
            
            temp = temp->next;
        }
        
        return head;
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        Node *head,*tail;
        int num;
        cin>>num;
        head=tail=new Node(num);
        for(int i=0;i<n-1;i++){
            int num;
            cin>>num;
            tail->next=new Node(num);
            tail=tail->next;
        }
        Solution ob;
        Node *temp=ob.primeList(head);
        while(temp!=NULL){
            cout<<temp->val<<" ";
            temp=temp->next;
        }
        cout<<endl;
    }
    return 0;
}
// } Driver Code Ends
