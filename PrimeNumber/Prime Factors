Given a number N. Find its unique prime factors in increasing order.
 

Example 1:

Input: N = 100
Output: 2 5
Explanation: 2 and 5 are the unique prime
factors of 100.
Example 2:

Input: N = 35
Output: 5 7
Explanation: 5 and 7 are the unique prime
factors of 35.
 

Your Task:
You don't need to read or print anything. Your task is to complete the function AllPrimeFactors() which takes N as input parameter and returns a list of all unique prime factors of N in increasing order.

 

Expected Time Complexity: O(N)
Expected Space Complexity: O(N)
 

Constraints:
1 <= N  <= 106






****************************************************************************************************************
//{ Driver Code Starts


#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends


class Solution{
	public:
	
	 bool prime(int n)
	  {
	      if(n==1)
	      return false;
	      
	      if(n == 2 || n==3)
	       return true;
	       
	       if(n%2==0 || n%3==0)
	        return false;
	        
	        for(int i = 5;i*i<=n;i+=6)
	        {
	            if(n%i==0 || n%(i+2)==0)
	             return false;
	        }
	        
	        return true;
	       
	  }
	
	vector<int>AllPrimeFactors(int N) {
	    // Code here
	    	vector<int>v;
	    	for(int i=2;i<=N;i++)
	    	{
	    	    if(N%i==0)
	    	    {
	    	        if(prime(i))
	    	        {
	    	            v.push_back(i);
	    	            N=N/i;
	    	        }
	    	    }
	    	}
	    	
	    	sort(v.begin(),v.end());
	    	return v;
	    
	}
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		long long int N;
		cin >> N;
		Solution ob;
		vector<int>ans = ob.AllPrimeFactors(N);
		for(auto i: ans)
			cout << i <<" ";
		cout <<"\n";
	}  
	return 0;
}
// } Driver Code Ends
