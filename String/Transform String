Given two strings A and B. Find the minimum number of steps required to transform string A into string B. The only allowed operation for the transformation is selecting a character from string A and inserting it in the beginning of string A.

Example 1:

Input:
A = "abd"
B = "bad"
Output: 1
Explanation: The conversion can take place in
1 operation: Pick 'b' and place it at the front.
Example 2:

Input:
A = "GeeksForGeeks"
B = "ForGeeksGeeks"
Output: 3
Explanation: The conversion can take
place in 3 operations:
Pick 'r' and place it at the front.
A = "rGeeksFoGeeks"
Pick 'o' and place it at the front.
A = "orGeeksFGeeks"
Pick 'F' and place it at the front.
A = "ForGeeksGeeks"












******************************************************************
//{ Driver Code Starts
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;


// } Driver Code Ends
class Solution
{
    public:
    int transform (string A, string B)
    {
        //code here.
        int c=0;
        int m = A.size();
        int n = B.size();
        if(m!=n) return -1;
        int i = m-1;
        int j = n-1;
        
        unordered_map<char,int>m1;
        for(int i = 0;i<n;i++){
        m1[A[i]]++;
        m1[B[i]]--;
        }
        
        for(int i = 0;i<n;i++)
        {
            if(m1[A[i]] !=0) return -1;
        }
        
        while(i>=0 )
        {
            if(A[i] == B[j])
            {
                i--;
               j--;
            }
            else if(A[i] != B[j])
            {
                c++;
                i--;
            }
            
        }
        return c;
    }
};


//{ Driver Code Starts.

int main () 
{
    int t; cin >> t;
    while (t--)
    {
        string A, B; 
        cin >> A >> B;
        Solution ob;
        cout <<ob.transform (A, B) << endl;
    }
}
// } Driver Code Ends
